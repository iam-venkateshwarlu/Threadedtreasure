pipeline {
    agent any

    environment {
        // Adjust PATH for your system
        PATH = "/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
        KUBECONFIG = "$HOME/.kube/config"
        DOCKER_HOST = 'unix:///Users/pradyuman/.docker/run/docker.sock'

        IMAGE_NAME       = "ecommerce-app"
        IMAGE_TAG        = "0.0.2"
        ARTIFACTORY_URL  = "venkatesh1409.jfrog.io"
        DOCKER_REPO      = "docker-dev-local"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://gitlab.com/tvenkateshwarlu39/threadedtreasures.git'
            }
        }

        stage('Test') {
            steps {
                echo "Running Tests"
                sh 'echo Tests Passed'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('MySonar') {
                    sh 'sonar-scanner -Dsonar.projectKey=ThreadedTreasure -Dsonar.sources=.'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                  echo ">>> Building Docker image..."
                  docker build -t $IMAGE_NAME:$IMAGE_TAG .
                '''
            }
        }

        stage('Push to JFrog Artifactory') {
            steps {
               withCredentials([usernamePassword(credentialsId: 'jfrog-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
               sh '''
              echo ">>> Logging into JFrog Artifactory..."
              echo $PASSWORD | docker login $ARTIFACTORY_URL/artifactory/api/docker/$DOCKER_REPO -u $USERNAME --password-stdin

              echo ">>> Tagging image for Artifactory..."
              docker tag $IMAGE_NAME:$IMAGE_TAG $ARTIFACTORY_URL/artifactory/api/docker/$DOCKER_REPO/$IMAGE_NAME:$IMAGE_TAG

              echo ">>> Pushing image to Artifactory..."
              docker push $ARTIFACTORY_URL/artifactory/api/docker/$DOCKER_REPO/$IMAGE_NAME:$IMAGE_TAG
              '''
                }
            } 
        }

    }

    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            echo 'This will always run after the stages.'
        }
    }
}
