pipeline {
    agent any

    environment {
        // PATH = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" = docker
        PATH = "/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
        KUBECONFIG = "$HOME/.kube/config"
        DOCKER_HOST = 'unix:///Users/pradyuman/.docker/run/docker.sock'
        IMAGE_NAME = "venkatesh1409/ecommerce-app"
        IMAGE_TAG   = "0.0.2"
        ARTIFACTORY_URL = "venkatesh1409.jfrog.io"
        DOCKER_REPO     = "docker-dev-local"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://gitlab.com/tvenkateshwarlu39/threadedtreasures.git'
            
            }
        }

        stage ("Test") {
            steps {
                echo "Running Tests"
                sh 'echo Tests Passed'
            }
        }

        // stage('SonarQube Analysis') {
        //     steps {
        //         withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
        //         sh '''
        //         sonar-scanner \
        //         -Dsonar.projectKey=ThreadedTreasure \
        //         -Dsonar.sources=. \
        //         -Dsonar.host.url=http://localhost:9000 \
        //         -Dsonar.token=$SONAR_TOKEN || true
        //          '''
        //         }
        //     }
        // }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('MySonar') {
                    sh 'sonar-scanner -Dsonar.projectKey=ThreadedTreasure -Dsonar.sources=.'
                }
            }
        }
        /*
        stage ('quality gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }*/

        //2 docker
        stage('Build Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "Logging in to DockerHub..."
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        
                        echo "Building Docker image..."
                        docker build -t $IMAGE_NAME:$IMAGE_TAG .
                    '''
                }
            }
        }

        stage('Push to JFrog Artifactory') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'jfrog-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                 echo ">>> Logging into JFrog Artifactory..."
                 echo $PASSWORD | docker login venkatesh1409.jfrog.io -u $USERNAME --password-stdin

                 echo ">>> Tagging image for Artifactory..."
                 docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${ARTIFACTORY_URL}/${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG}

                 echo ">>> Pushing image to Artifactory..."
                 docker push ${ARTIFACTORY_URL}/${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG}
                 '''
                }
            }
        }

    }



    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            echo 'This will always run after the stages.'
        }
    }
}
/*
           // echo "Running Trivy scan..."
                        // trivy image --exit-code 0 --severity HIGH,CRITICAL $DOCKER_IMAGE:$DOCKER_TAG || true

                        // echo "Pushing Docker image to DockerHub..."
                        // docker push $DOCKER_IMAGE:$DOCKER_TAG
    
        */

                    